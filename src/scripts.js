/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "build";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./applications/app.js":
/*!*****************************!*\
  !*** ./applications/app.js ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controller_controller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controller/controller.js */ \"./applications/controller/controller.js\");\n/* jshint esversion: 6 */\r\n\r\n// точка входа, с которой начинается выполнение всей модели MVC\r\n// import Controller from './controller/controller.js';\r\n// const startGame = () => new Controller();\r\n// startGame();\r\n// export default startGame;\r\n\r\n// ---\r\n\r\n// import Model from './model.js';\r\n// import View from './view.js';\r\n// import Controller from './controller.js';\r\n\r\n// initializeGame(Model, View, Controller);\r\n\r\n// import {one, two} from './model/model.js';\r\n// import one from './model/model.js';\r\n// import two from './controller/controller.js';\r\n\r\n\r\n// // example: 1\r\n// import {out} from './view/view.js';\r\n// out();\r\n\r\n\r\n// function Constructor(name) {\r\n// \tthis.name = name;\r\n// \talert(this.name);\r\n// }\r\n\r\n// Constructor('vasek');\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// import {buttonsEvents} from './view/view.js';\r\n\r\nlet getEventsDOM = new _controller_controller_js__WEBPACK_IMPORTED_MODULE_0__[\"getEventsElementsDOM\"]();\r\n\r\ngetEventsDOM.getDisabledInputWidth;\r\ngetEventsDOM.getDisabledInputHeight;\r\ngetEventsDOM.getDisabledInputSpeed;\n\n//# sourceURL=webpack:///./applications/app.js?");

/***/ }),

/***/ "./applications/controller/controller.js":
/*!***********************************************!*\
  !*** ./applications/controller/controller.js ***!
  \***********************************************/
/*! exports provided: getEventsElementsDOM */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getEventsElementsDOM\", function() { return getEventsElementsDOM; });\n/* harmony import */ var _model_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/model.js */ \"./applications/model/model.js\");\n/* jshint esversion: 6 */\r\n\r\n// Контроллер управляет запросами пользователя (получаемые в виде запросов \r\n// HTTP GET или POST, когда пользователь нажимает на элементы интерфейса \r\n// для выполнения различных действий). Его основная функция — вызывать и \r\n// координировать действие необходимых ресурсов и объектов, нужных для \r\n// выполнения действий, задаваемых пользователем. Обычно контроллер вызывает \r\n// соответствующую модель для задачи и выбирает подходящий вид.\r\n\r\n// import Model from './model.js';\r\n// import View from './view.js';\r\n\r\n// class Controller {\r\n\r\n//   constructor() {\r\n//     this._view = new View();\r\n//     this._gameStateListen();\r\n//     this._changeCellListen();\r\n//     this._unfocusInputsListen();\r\n\r\n//     this._model = new Model();\r\n//     this._model.createEmptyField();\r\n\r\n//     this._view.drawField(this._model.getHeight(), this._model.getWidth(), this._model.getCells());\r\n//   }\r\n// }\r\n\r\n// example: 1\r\n// export let two = 2;\r\n\r\n// // example: 2\r\n// export default class Task {\r\n//   constructor(name = Task.getDefaultTitle()) {\r\n// \t\tthis.name = name;\r\n// \t\tthis.done = false;\r\n// \t\tTask.count += 1; // инкремент, см. ниже статик св-во.\r\n// \t\talert(this.name);\t\r\n// \t} // тут ни , ни ; не ставятся\r\n\t\r\n// \t// создаем методы, т.е. то, что объект будет уметь делать\r\n// \tcomplete() {\r\n// \t\tthis.done = true;\r\n// \t\tconsole.log('task ' + this.name + ' exelent');\r\n// \t}\r\n\r\n// \tcountStatic() {\r\n// \t\tconsole.log(Task.count);\r\n// \t}\r\n\r\n// \t// статич. методы, пренадлежат самому классу а не объектам созданным на его основе.\r\n// \t// часто исп. для содания вспомогательных ф-ций\r\n// \tstatic getDefaultTitle() {\r\n// \t\treturn 'Quest...';\r\n// \t}\r\n\r\n// \t// метод, связывает св-во объекта с ф-цией, которое будет вызываться при обращении к этому св-ву\r\n// \tget getDone() {\r\n// \t\treturn this.done === true ? 'Executing' : 'NOT executing';\r\n// \t}\r\n\r\n// \t// set - принимает параметр, которому мы можем присвоить св-во.\r\n// \tset getDone(value) {\r\n// \t\tif (value !== undefined && typeof value === 'boolean') {\r\n// \t\t\tthis.done = value;\r\n// \t\t} else {\r\n// \t\t\tconsole.error('Error');\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\n// // example 3: наследуемый класс\r\n// export class subTaskEx extends Task {\r\n// \tconstructor(title) {\r\n// \t\tsuper(title); //  super используется для вызова функций, принадлежащих родителю объекта\r\n// \t\tconsole.log(title + ' creating subtasking...');\t\t\r\n// \t}\r\n\r\n// \t// перезаписываем родительский метод\t\t\r\n// \tcomplete() {\r\n// \t\tsuper.complete();\r\n// \t\tconsole.log('subtasking................');\r\n// \t}\r\n// }\r\n\r\n// let subtask = new subTaskEx('learn ES');\r\n// console.log(subtask);\r\n// subtask.complete();\r\n// console.log(subtask);\r\n\r\n// проверяем является ли объект task - представителем обоих классов\r\n// console.log(subtask instanceof subTask); // true\r\n// console.log(subtask instanceof Task); // true\r\n\r\n// ---\r\n\r\n// статич. сво-ва, пренадлежат самим классам, а не объектам созданных на его основе,\r\n// используются для хранения статической инф-ы,\tобъявляются ВСЕГДА за телом класса\r\n// Task.count = 0;\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n\t\t\r\n\r\nclass getEventsElementsDOM {\r\n\tconstructor() {\r\n\t\t// We hang the event on the buttons\r\n\t\tthis.buttonStart = document.getElementsByClassName('start')[0].onclick = _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"startGame\"];\r\n\t\tthis.buttonRandom = document.getElementsByClassName('random')[0].onclick = _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"randomFill\"];\r\n\t\tthis.buttonPausePlay = document.getElementsByClassName('pause')[0].onclick = _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"pauseGame\"];\r\n\r\n\t\tthis.inputFieldWidth = document.getElementsByClassName('width')[0].onclick = _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"fieldSize\"];\r\n\t\tthis.inputFieldHeight = document.getElementsByClassName('height')[0].onclick = _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"fieldSize\"];\r\n\t}\t\t\r\n\r\n\tget getDisabledInputWidth() {\r\n\t\tdocument.getElementsByClassName('width')[0].onkeypress = function (e) {\r\n\t\t\treturn false;\r\n\t\t};\r\n\t}\r\n\r\n\tget getDisabledInputHeight() {\r\n\t\tdocument.getElementsByClassName('height')[0].onkeypress = function (e) {\r\n\t\t\treturn false;\r\n\t\t};\r\n\t}\r\n\r\n\tget getDisabledInputSpeed() {\r\n\t\tdocument.getElementsByClassName('speed')[0].onkeypress = function (e) {\r\n\t\t\treturn false;\r\n\t\t};\r\n\t}\r\n}\n\n//# sourceURL=webpack:///./applications/controller/controller.js?");

/***/ }),

/***/ "./applications/controller/getElementsDOM.js":
/*!***************************************************!*\
  !*** ./applications/controller/getElementsDOM.js ***!
  \***************************************************/
/*! exports provided: getElementsDOM */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getElementsDOM\", function() { return getElementsDOM; });\n/* jshint esversion: 6 */\r\n\r\nclass getElementsDOM {\r\n  constructor() {\r\n    this.canvasField = document.getElementsByClassName('grid__gradient')[0];\r\n    this.countCycle = document.getElementsByClassName('count__cycle')[0];\r\n    this.countLife = document.getElementsByClassName('count__life')[0];\r\n    this.countDead = document.getElementsByClassName('count__dead')[0];\r\n    this.countPoint = document.getElementsByClassName('count__point')[0];\r\n    this.pausePlay = document.getElementsByClassName('pause')[0];\r\n    this.startStop = document.getElementsByClassName('start')[0];    \r\n    this.speedGame = document.getElementsByClassName('speed')[0];\r\n    this.fieldWidth = document.getElementsByClassName('width')[0];\r\n    this.fieldHeight = document.getElementsByClassName('height')[0];\r\n  }\r\n \r\n  get getCanvasFieldDOM() {\r\n    return this.canvasField;\r\n  }\r\n\r\n  get getCountCycleDOM() {\r\n    return this.countCycle;\r\n  }\r\n\r\n  get getCountLifeDOM() {\r\n    return this.countLife;\r\n  }\r\n\r\n  get getCountDeadDOM() {\r\n    return this.countDead;\r\n  }\r\n\r\n  get getCountPointDOM() {\r\n    return this.countPoint;\r\n  }\r\n\r\n  get getPausePlayDOM() {\r\n    return this.pausePlay;\r\n  }\r\n\r\n  get getStartStopDOM() {\r\n    return this.startStop;\r\n  }\r\n\r\n  get getSpeedGameDOM() {\r\n    return this.speedGame;\r\n  }\r\n\r\n  get getFieldWidthDOM() {\r\n    return this.fieldWidth;\r\n  }\r\n\r\n  get getFieldHeightDOM() {\r\n    return this.fieldHeight;\r\n  }\r\n\r\n  // function\r\n  // complete() {\r\n  //   console.log(this.canvas + ' func');\r\n  // }\r\n}\n\n//# sourceURL=webpack:///./applications/controller/getElementsDOM.js?");

/***/ }),

/***/ "./applications/model/model.js":
/*!*************************************!*\
  !*** ./applications/model/model.js ***!
  \*************************************/
/*! exports provided: canvas, ctx, pointSize, fieldSquare, field, fieldSize, pauseGame, randomFill, startGame, resetGame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canvas\", function() { return canvas; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ctx\", function() { return ctx; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pointSize\", function() { return pointSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fieldSquare\", function() { return fieldSquare; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"field\", function() { return field; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fieldSize\", function() { return fieldSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pauseGame\", function() { return pauseGame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randomFill\", function() { return randomFill; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"startGame\", function() { return startGame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resetGame\", function() { return resetGame; });\n/* harmony import */ var _view_view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/view.js */ \"./applications/view/view.js\");\n/* harmony import */ var _controller_controller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controller/controller.js */ \"./applications/controller/controller.js\");\n/* harmony import */ var _controller_getElementsDOM_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../controller/getElementsDOM.js */ \"./applications/controller/getElementsDOM.js\");\n/* jshint esversion: 6 */\r\n\r\n// Модель - это данные и правила, которые используются для работы с данными, \r\n// которые представляют концепцию управления приложением. В любом приложении \r\n// вся структура моделируется как данные, которые обрабатываются определённым \r\n// образом. Что такое пользователь для приложения — сообщение или книга? Только \r\n// данные, которые должны быть обработаны в соответствии с правилами (дата не \r\n// может указывать в будущее, e-mail должен быть в определённом формате, имя \r\n// не может быть длиннее Х символов, и так далее).\r\n\r\n// // example: 1\r\n// import {two} from '../controller/controller.js';\r\n// export let one = two;\r\n\r\n// export let three = () => new User(\"vasya\");\r\n// export let two = 2;\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n// get all the DOM's\r\n\r\n\r\n// ---\r\n\r\nlet getDOM = new _controller_getElementsDOM_js__WEBPACK_IMPORTED_MODULE_2__[\"getElementsDOM\"]();\r\nlet countCycle = getDOM.getCountCycleDOM;\r\nlet countLife = getDOM.getCountLifeDOM;\r\nlet countDead = getDOM.getCountDeadDOM;\r\nlet pausePlay = getDOM.getPausePlayDOM;\r\nlet startStop = getDOM.getStartStopDOM;\r\nlet countPoint = getDOM.getCountPointDOM;\r\nlet speedGame = getDOM.getSpeedGameDOM;\r\nlet fieldWidth = getDOM.getFieldWidthDOM;\r\nlet fieldHeight = getDOM.getFieldHeightDOM;\r\n\r\n// ---\r\n\r\nlet canvas = getDOM.getCanvasFieldDOM;\r\ncanvas.width = fieldWidth.value;\r\ncanvas.height = fieldHeight.value;\r\nvar ctx = canvas.getContext('2d'); // Объявляем Двумерный контекст для рисования\r\n\r\n// счетчики\r\nvar count = 0;\r\nvar counterLife = 0;\r\nvar counterDead = 0;\r\n\r\n// user data:\r\nlet pointSize = 10; \r\nlet fieldSquare = canvas.width * 1 / pointSize * 1; // 300 / 10 = 30, т.е. массив будет 30х30\r\nvar randomStep = canvas.width * 70 / 100; // для случаенного заполнения поля, см.: fieldSize()\r\n\r\nvar pausePlayStatus = 0;\r\nvar startSpeed = 0;\r\nvar statusField = 0; // 0 - поле пустое, если > 0 - на поле есть точки\r\nvar statusFieldReset = 0; // для кнопки RESET, 0 - кнопка НЕ была нажата, 1 - нажата.\r\nvar randomStatus = 0; // если рандомизируем игра НЕ сбрасывается, 0 - не рандомили, 1 - рандомили\r\nvar startStatus = 0; // 0 - старт, 1 - стоп\r\n// var resizeStatus = 0;\r\n\r\n// ---\r\n\r\npausePlay.disabled = true;\r\n\r\n// размер для клеточного поля, идет от размера квадратика, который ставиться при клике\r\ncanvas.style.backgroundSize = pointSize + 'px ' + pointSize + 'px';\r\n\r\n\r\nctx.fillStyle = '#00FF00'; // цвет квадратика\r\n\r\n// Создадим глобальный пустой массив (см. ниже)\r\nlet field = function field() {\r\n\tlet field = [];\r\n\treturn field;\r\n}\r\n\r\n// --------------------------------------------------------------------------------------\r\n\r\nfunction fieldSize() {\r\n\tif (fieldWidth.value < fieldHeight.value) { \r\n\t\tfieldWidth.value = fieldHeight.value;\r\n\t}\r\n\r\n\tcanvas.width = fieldWidth.value;\r\n\tcanvas.height = fieldHeight.value;\r\n\r\n\tif (canvas.width > canvas.height || canvas.width == canvas.height) {\r\n\t\trandomStep = canvas.width * 70 / 100;\r\n\t} else {\r\n\t\trandomStep = canvas.height * 70 / 100;\r\n\t\tconsole.log('randomStep: ' + randomStep);\r\n\t}\r\n\r\n\tfieldSquare = canvas.width * 1 / pointSize * 1;\t\r\n\tlocation.reload();\t\r\n}\r\n\r\n// ---\r\n\r\nfunction goLife() {\r\n\tvar n = fieldSquare;\r\n\tvar m = fieldSquare;\r\n\tfor (var i = 0; i < m; i++) {\r\n\t\tfield[i] = []; // Объявляем пустой массив\r\n\r\n\t\t//для перебоки вышесозданного массива, т.е. создаем двумерный массив\r\n\t\tfor (var j = 0; j < n; j++) {\r\n\t\t\tfield[i][j] = 0;\r\n\t\t}\r\n\t}\r\n}\r\ngoLife(); //Запускаем наше игровое поле\r\n\r\n// ---\r\n\r\nfunction checkFieldEmpty() {\t\r\n\tfor (var i = 0; i < fieldSquare; i++) {\r\n\t\tfor (var j = 0; j < fieldSquare; j++) {\r\n\t\t\tif (field[i][j] != 0) {\r\n\t\t\t\tstatusField++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcountPoint.innerHTML = statusField;\r\n}\r\n\r\n// ---\r\n\r\nfunction pauseGame() {\r\n\tif (pausePlayStatus == 0) {\r\n\t\tpausePlayStatus = 1;\t\r\n\t\tpausePlay.innerHTML = 'Play';\r\n\r\n\t\tstart.disabled = true; // отрубаем нашу кнопку которая увеличивает скорость\r\n\t\t\r\n\t} else {\r\n\t\tpausePlayStatus = 0;\r\n\t\tpausePlay.innerHTML = 'Pause';\r\n\r\n\t\tstartLife(); // в данном случае - продолжаем нашу игру\r\n\r\n\t\tstart.disabled = false; // включаем обратно\r\n\t}\t\r\n\r\n\t(pausePlayStatus == 0) ? console.log('play') : console.log('pause');\r\n}\r\n\r\n// ---\r\n\r\nfunction randomFill() {\t\t\r\n\trandomStatus = 1; // говорим, что мы нажали рандом\r\n\r\n\t// Очищаем массив каждый раз\r\n\tfor (let i = 0; i < fieldSquare; i++) {\r\n\t\tfor (let j = 0; j < fieldSquare; j++) {\t\t\t\r\n\t\t\tstatusField = 0;\r\n\t\t\tfield[i][j] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n\tlet max;\r\n\tlet min = 1;\r\n\r\n\t// Берем максимальное значение от ширины или высоты, смотря что больше.\r\n\tif (canvas.width > canvas.height) {\r\n\t\tmax = canvas.width;\t\t\r\n\t} else {\r\n\t\tmax = canvas.height;\r\n\t}\r\n\r\n\tif (canvas.width == canvas.height) {\r\n\t\tmax = canvas.width;\r\n\t} else { \r\n\t\tmax = canvas.width;\r\n\t}\r\n\r\n\tfor (let i = 0; i < randomStep; i++) {\r\n\t\tvar randX = Math.round(Math.random() * (max - min) + min);\r\n\t\tvar randY = Math.round(Math.random() * (max - min) + min);\r\n\r\n\t\tvar x = randX;\r\n\t\tvar y = randY;\r\n\r\n\t\tx = Math.floor(x / pointSize);\r\n\t\ty = Math.floor(y / pointSize);\r\n\r\n\t\tfield[y][x] = 1; // Заполнение игрового поля сгенерированными рандомными числами\r\n\r\n\t\tObject(_view_view_js__WEBPACK_IMPORTED_MODULE_0__[\"drawField\"])();\r\n\t}\r\n}\r\n\r\n// ---\r\n\r\nfunction startGame() {\r\n\tif (startStatus == 0) {\r\n\t\tcheckFieldEmpty();\r\n\r\n\t\tif (statusField > 1) {\r\n\t\t\tstatusFieldReset = 0; // сначала надо сбросить наш RESET !!!\r\n\r\n\t\t\tstartLife();\r\n\t\t\t\r\n\t\t\tpausePlay.disabled = false;\r\n\t\t} else {\r\n\t\t\talert('Нужно больше точек...');\r\n\t\t}\r\n\r\n\t\tstartStatus = 1;\r\n\t\tstartStop.innerHTML = 'Stop';\r\n\t\tconsole.log('startStatus: ' + startStatus);\r\n\t} else {\r\n\t\tresetGame();\r\n\r\n\t\tstartStatus = 0;\r\n\t\tstartStop.innerHTML = 'Start';\r\n\t}\r\n}\r\n\r\n// ---\r\n\r\nfunction resetGame() {\r\n\tpausePlayStatus = 1;\r\n\r\n\tgoLife();\r\n\tObject(_view_view_js__WEBPACK_IMPORTED_MODULE_0__[\"drawField\"])();\r\n\r\n\tcount = 0;\r\n\tcounterLife = 0;\r\n\tcounterDead = 0;\r\n\tpausePlayStatus = 0;\r\n\tstartSpeed = 0;\r\n\tstatusFieldReset = 1; // стопает цикл игры!!!\r\n\tstatusField = 0;\r\n\r\n\tcountCycle.innerHTML = count + ' | ';\r\n\tcountLife.innerHTML = counterLife  + ' | ';\r\n\tcountDead.innerHTML = counterDead + ' | ';\r\n\tcountPoint.innerHTML = statusField;\r\n\r\n\tpausePlay.innerHTML = 'Pause';\r\n\tpausePlay.disabled = true;\t\r\n\r\n\tstartStop.innerHTML = 'Play';\r\n\tstartStop.disabled = false;\r\n\r\n\tconsole.log('RESET: (statusFieldReset): ' + statusFieldReset);\r\n}\r\n\r\n// ---\r\n\r\nfunction startLife() {\r\n\tlet field2 = [];\r\n\tlet isAlive = [];\t\r\n\r\n\tif (pausePlayStatus == 0  && statusFieldReset == 0) {\t\t\r\n\t\tfor (let i = 0; i < fieldSquare; i++) {\t\t\t\r\n\t\t\tfield2[i] = [];\r\n\t\t\t// console.log('mas2:' + mas2);\r\n\t\t\tfor (let j = 0; j < fieldSquare; j++) {\t\t\t\t\r\n\t\t\t\t// мы должны посчитать кол-во соседей, нужно учесть что тут у нас встречаются\r\n\t\t\t\t// краевые условия\r\n\t\t\t\tlet neighbors = 0;\t\r\n\r\n\t\t\t\t// считаем соседей с верху + ф-цию см. ниже\r\n\t\t\t\tif (field[topField(i) - 1][j] == 1) neighbors++;\r\n\t\t\t\t// if (mas[i][j - 1] == 1) neighbors++;\r\n\r\n\t\t\t\t// считаем соседей с права\r\n\t\t\t\tif (field[i][fpp(j) + 1] == 1) neighbors++;\r\n\t\t\t\t// if (mas[i + 1][j] == 1) neighbors++;\r\n\r\n\t\t\t\t// сосед с низу\r\n\t\t\t\tif (field[fpp(i) + 1][j] == 1) neighbors++;\r\n\t\t\t\t// if (mas[i][j + 1] == 1) neighbors++;\r\n\r\n\t\t\t\t// сосед с лева\r\n\t\t\t\tif (field[i][topField(j) - 1] == 1) neighbors++;\r\n\t\t\t\t// if (mas[i - 1][j] == 1) neighbors++;\r\n\r\n\t\t\t\t// соседи по диагонали в право вверх /\r\n\t\t\t\tif (field[topField(i) - 1][fpp(j) + 1] == 1) neighbors++;\r\n\t\t\t\t// if (mas[i + 1][j - 1] == 1) neighbors++;\r\n\r\n\t\t\t\t// соседи по диагонали в право в низ \\\r\n\t\t\t\tif (field[fpp(i) + 1][fpp(j) + 1] == 1) neighbors++;\r\n\t\t\t\t// if (mas[i + 1][j + 1] == 1) neighbors++;\r\n\r\n\t\t\t\t// соседи по диагонали в лево в низ /\r\n\t\t\t\tif (field[fpp(i) + 1][topField(j) - 1] == 1) neighbors++;\r\n\t\t\t\t// if (mas[i - 1][j + 1] == 1) neighbors++;\r\n\r\n\t\t\t\t// соседи по диагонали в лево в верх \\\r\n\t\t\t\tif (field[topField(i) - 1][topField(j) - 1] == 1) neighbors++;\r\n\t\t\t\t// if (mas[i - 1][j - 1] == 1) neighbors++;\r\n\r\n/*\r\n * Распределение живых клеток в начале игры называется первым поколением. \r\n * Каждое следующее поколение рассчитывается на основе предыдущего по таким правилам:\r\n * \r\n * - в пустой (мёртвой) клетке, рядом с которой ровно три живые клетки, зарождается жизнь;\r\n * - если у живой клетки есть две или три живые соседки, то эта клетка продолжает жить; \r\n * в противном случае, если соседей меньше двух или больше трёх, клетка умирает \r\n * («от одиночества» или «от перенаселённости»)\r\n * \r\n * Игра прекращается, если\r\n * \r\n * - на поле не останется ни одной «живой» клетки\r\n * - конфигурация на очередном шаге в точности (без сдвигов и поворотов) повторит себя же \r\n * на одном из более ранних шагов (складывается периодическая конфигурация)\r\n * - при очередном шаге ни одна из клеток не меняет своего состояния \r\n * (складывается стабильная конфигурация; предыдущее правило, вырожденное до \r\n * одного шага назад)\r\n */\r\n\t\t\t\tisAlive = field[i][j]; // т.е. это текущее состояние с точками\r\n\r\n\t\t\t\t// проверка на соседей:\t\t\t\t\r\n\t\t\t\tif (isAlive == 0 && neighbors === 3) {\r\n\t\t\t\t\tfield2[i][j] = 1;\r\n\t\t\t\t\tcounterLife++;\r\n\t\t\t\t\tcountLife.innerHTML = counterLife  + ' | ';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (isAlive == 1 && (neighbors === 3 || neighbors === 2)) {\r\n\t\t\t\t\t\tfield2[i][j] = 1; \r\n\t\t\t\t\t\tcounterLife++;\r\n\t\t\t\t\t\tcountLife.innerHTML = counterLife  + ' | ';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (isAlive == 1 && neighbors > 3) {\r\n\t\t\t\t\t\t\tfield2[i][j] = 0;\r\n\t\t\t\t\t\t\tcounterDead++;\r\n\t\t\t\t\t\t\tcountDead.innerHTML = counterDead  + ' | ';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (isAlive == 1 && neighbors < 2) {\r\n\t\t\t\t\t\t\t\tfield2[i][j] = 0;\r\n\t\t\t\t\t\t\t\tcounterDead++;\r\n\t\t\t\t\t\t\t\tcountDead.innerHTML = counterDead  + ' | ';\r\n\t\t\t\t\t\t\t} else { \r\n\t\t\t\t\t\t\t\tfield2[i][j] = 0; counterDead++;\r\n\t\t\t\t\t\t\t\t\tcountDead.innerHTML = counterDead + ' | ';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Проверка на наличие точек на поле\r\n\t\t\t\tif (statusField < 1 && randomStatus == 0) {\r\n\t\t\t\t\talert('GameOver man!. Все точки сдохли, плодиться не кому.');\t\t\t\t\t\r\n\r\n\t\t\t\t\tvar request = prompt('Введите: НЕТ - что бы остаться на страничке', '');\r\n\t\t\t\t\tswitch (request) {\r\n\t\t\t\t\t\tcase 'ДА': \r\n\t\t\t\t\t\t\tlocation.reload(); \r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'НЕТ': case 'Нет': case 'нет': case 'НеТ': \r\n\t\t\t\t\t\tcase 'НЕт': case 'неТ': case 'нЕт':\r\n\t\t\t\t\t\t\tpausePlay.disabled = true;\r\n\t\t\t\t\t\t\tstartStop.disabled = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault: \r\n\t\t\t\t\t\t\talert('Некорректное действие, страница будет перезагружена');\r\n\t\t\t\t\t\t\tlocation.reload(); // перезагрузки странички\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// присваиваем новое состояние\r\n\t\tfield = field2;\r\n\r\n\t\t// Запускаем ф-цию отрисовки\r\n\t\tObject(_view_view_js__WEBPACK_IMPORTED_MODULE_0__[\"drawField\"])();\r\n\r\n\t\t// увеличиваем счетчик\r\n\t\tcount++;\r\n\r\n\t\t// Записываем в span (html) наш счетчик\r\n\t\tcountCycle.innerHTML = count + ' | ';\r\n\r\n\t\tstatusField = 0;\r\n\t\tcheckFieldEmpty();\r\n\r\n\t\tcountPoint.innerHTML = statusField;\r\n\t\trandomStatus = 0; // отбой нашего рандома\r\n\t\t\r\n\t\t// таймер для отрисовки\r\n\t\tlet timer = setTimeout(startLife, speedGame.value); //Где 300 это период отрисовки\r\n\t}\r\n\treturn;\t\r\n}\r\n\r\n// ---\r\n\r\n// учитываем выход за предел поля с верху\r\nfunction topField(i) {\r\n\tif (i == 0) {\r\n\t\treturn fieldSquare;\r\n\t}\r\n\treturn i;\r\n}\r\n\r\n// учитываем выход за предел поля с права\r\nfunction fpp(i) {\r\n\tif (i == fieldSquare * 1 - 1) {\r\n\t\treturn -1; \r\n\t}\r\n\treturn i;\r\n}\r\n\r\n// ---\r\n\r\n// Вешаем на canvas событие click, где event указывает, что мы будем работать с событием\r\n// canvas.onclick = function(event) {\r\n\tcanvas.onclick = function clickMouseButton(event) {\r\n\t// Определим координату мыши относительно canvas\r\n\tlet x = event.offsetX;\r\n\tlet y = event.offsetY;\r\n\t\r\n\tconsole.log('offsetX: ' + x);\r\n\tconsole.log('offsetY: ' + y);\r\n\r\n\t// Поля от 0 до 10 будут принадлежать первому кубику, от 10 до 20 - 2му, и.т.д.\r\n\tx = Math.floor(x / pointSize); //300 / 10 = 30 кубиков, затем округляем в нижнюю сторону\r\n\ty = Math.floor(y / pointSize);\r\n\r\n\tconsole.log('X: ' + x);\r\n\tconsole.log('Y: ' + y);\r\n\t\r\n\tif (field[y][x] == 0) {\r\n\t\tfield[y][x] = 1; // Заполнение игрового поля, т.е. куда кликнем, там будет ЕДИНИЦА\r\n\t} else {\r\n\t\tfield[y][x] = 0;\r\n\t}\r\n\r\n\t// Проверяем\r\n\tconsole.log(field); //В начале и в конце будет 1, если тыкнуть на начало и конце поля\r\n\t// masTemp = mas;\t// подумать надо ли это или нет\r\n\r\n\tObject(_view_view_js__WEBPACK_IMPORTED_MODULE_0__[\"drawField\"])(); // Ф-ция которая будет отрисовывать точку при клике\t\t\r\n};\n\n//# sourceURL=webpack:///./applications/model/model.js?");

/***/ }),

/***/ "./applications/view/view.js":
/*!***********************************!*\
  !*** ./applications/view/view.js ***!
  \***********************************/
/*! exports provided: drawField */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"drawField\", function() { return drawField; });\n/* harmony import */ var _model_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/model.js */ \"./applications/model/model.js\");\n// Вид обеспечивает различные способы представления данных, которые получены из \r\n// модели. Он может быть шаблоном, который заполняется данными. Может быть \r\n// несколько различных видов, и контроллер выбирает, какой подходит наилучшим \r\n// образом для текущей ситуации.\r\n\r\n// Веб приложение обычно состоит из набора контроллеров, моделей и видов. \r\n// Контроллер может быть устроен как основной, который получает все запросы и \r\n// вызывает другие контроллеры для выполнения действий в зависимости от ситуации.\r\n\r\n// import Controller from './controller.js';\r\n// const startGame = () => new Controller();\r\n// startGame();\r\n// export default startGame;\r\n\r\n// example: 1\r\n// import {one} from '../model/model.js';\r\n// export function out() {\r\n  // alert(one);\r\n// }\r\n\r\n// example: 2\r\n// import Task from '../controller/controller.js';\r\n// let two = new Task(\"Вася\"); // new для вызова ф-ции\r\n// console.log(two.getDone, two.done);\r\n// two.complete();\r\n// two.countStatic();\r\n// console.log(two.getDone, two.done);\r\n\r\n// let three = new Task()\r\n// console.log(three);\r\n// console.log(three.done);\r\n// console.log(three.getDone);\r\n\r\n// example 3\r\n// import {subTaskEx} from '../controller/controller.js';\r\n// let subtask = new subTaskEx('learn ES');\r\n// console.log(subtask);\r\n// subtask.complete();\r\n// subtask.te\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Ф-ция для отрисоки прямоугольников при клике\r\nfunction drawField() {\r\n\t_model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"ctx\"].clearRect(0, 0, _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"canvas\"].width, _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"canvas\"].height); // Рисуем очищающий прямоугольник от 00(x,y) до 300(x,y)\r\n\r\n\t// Перебираем массив, и если какой то елемент = 1, то зарисовываем\r\n\tfor (var i = 0; i < _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"fieldSquare\"]; i++) {\t\t\t\t\r\n\t\tfor (var j = 0; j < _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"fieldSquare\"]; j++) {\r\n\t\t\t// условие проверки\r\n\t\t\tif (_model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"field\"][i][j] == 1) {\r\n\t\t\t\t// квадратик будет размером 10px(10, 10), если кликаем в первом поле, \r\n\t\t\t\t// координата должна быть от 0 до 10, если во втором поле от 10 до 20 и.т.д.\r\n\t\t\t\t// т.е. по сути это задает точку под указателем мышки при клике\r\n\t\t\t\t_model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"ctx\"].fillRect(j * _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"pointSize\"], i * _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"pointSize\"], _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"pointSize\"], _model_model_js__WEBPACK_IMPORTED_MODULE_0__[\"pointSize\"]); \t\t\t\t\r\n\t\t\t}\r\n\t\t\t// masSave[i] = mas[i]; // подумать надо ли это или нет\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n// ---\r\n\r\n// function speed() {\r\n// \tstartSpeed++;\r\n// \tstart.innerHTML = 'speed: x' + startSpeed;\r\n// }\r\n\r\n// ---\r\n\r\n\n\n//# sourceURL=webpack:///./applications/view/view.js?");

/***/ }),

/***/ 0:
/*!***********************************!*\
  !*** multi ./applications/app.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./applications/app.js */\"./applications/app.js\");\n\n\n//# sourceURL=webpack:///multi_./applications/app.js?");

/***/ })

/******/ });